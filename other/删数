/*
 * 有一个数组a[N]顺序存放0~N-1，要求每隔两个数删掉一个数，到末尾时循环至开头继续进行，求最后一个被删掉的数的原始下标位置。
 * 以8个数(N=7)为例:｛0，1，2，3，4，5，6，7｝，0->1->2(删除)->3->4->5(删除)->6->7->0(删除),如此循环直到最后一个数被删除。
 * 每组数据为一行一个整数n(小于等于1000)，为数组成员数,如果大于1000，则对a[999]进行计算。
 * 一行输出最后一个被删掉的数的原始下标位置。
 */


import java.util.Arrays;
import java.util.Scanner;

/**
 *
 * @author H
 */
public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        Scanner in = new Scanner(System.in);
        while(true) {
            int n = in.nextInt();
            int[] arr = new int[n];
            for(int i=0;i<n;i++) {
                arr[i] = i;
            }
            int i=-1;
            int count = 0;
            int k = 0;
            while(arr.length>0) {
                
                ++i;
                if(i == arr.length) i=0;
                count++;
                if(count == 3) {
                   // System.out.println(arr[i]);
                    k = arr[i];
                    for(int j=i;j<arr.length-1;j++) {
                        arr[j] = arr[j+1];
                    }
                    arr = Arrays.copyOf(arr, arr.length-1);   
                    count = 0;
                    i--;
                }
            }
            System.out.println(k);
        }
           
        
        
        
    }
    
}
